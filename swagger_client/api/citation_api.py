# coding: utf-8

"""
    Doi Server API

    Doi Server API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CitationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_citation(self, doi, style, lang, **kwargs):  # noqa: E501
        """get_citation  # noqa: E501

        Returns the formatted citation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_citation(doi, style, lang, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str doi: DOI project name (required)
        :param str style: style (required)
        :param str lang: langage (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_citation_with_http_info(doi, style, lang, **kwargs)  # noqa: E501
        else:
            (data) = self.get_citation_with_http_info(doi, style, lang, **kwargs)  # noqa: E501
            return data

    def get_citation_with_http_info(self, doi, style, lang, **kwargs):  # noqa: E501
        """get_citation  # noqa: E501

        Returns the formatted citation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_citation_with_http_info(doi, style, lang, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str doi: DOI project name (required)
        :param str style: style (required)
        :param str lang: langage (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['doi', 'style', 'lang']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_citation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'doi' is set
        if ('doi' not in params or
                params['doi'] is None):
            raise ValueError("Missing the required parameter `doi` when calling `get_citation`")  # noqa: E501
        # verify the required parameter 'style' is set
        if ('style' not in params or
                params['style'] is None):
            raise ValueError("Missing the required parameter `style` when calling `get_citation`")  # noqa: E501
        # verify the required parameter 'lang' is set
        if ('lang' not in params or
                params['lang'] is None):
            raise ValueError("Missing the required parameter `lang` when calling `get_citation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'doi' in params:
            query_params.append(('doi', params['doi']))  # noqa: E501
        if 'style' in params:
            query_params.append(('style', params['style']))  # noqa: E501
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/citation/format', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_citations_language(self, **kwargs):  # noqa: E501
        """get_citations_language  # noqa: E501

        Renvoie la liste des langages disponibles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_citations_language(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_citations_language_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_citations_language_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_citations_language_with_http_info(self, **kwargs):  # noqa: E501
        """get_citations_language  # noqa: E501

        Renvoie la liste des langages disponibles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_citations_language_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_citations_language" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/citation/language', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_citations_style(self, **kwargs):  # noqa: E501
        """get_citations_style  # noqa: E501

        Renvoie la liste des styles disponibles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_citations_style(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_citations_style_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_citations_style_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_citations_style_with_http_info(self, **kwargs):  # noqa: E501
        """get_citations_style  # noqa: E501

        Renvoie la liste des styles disponibles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_citations_style_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_citations_style" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/citation/style', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
