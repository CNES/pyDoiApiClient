# coding: utf-8

"""
    Doi Server API

    A Digital Object Identifier (DOI) is an alphanumeric string assigned to uniquely identify an object. It is tied to a metadata description of the object as well as to a digital location, such as a URL, where all the details about the object are accessible. This documentation provides an API to query the DOI-server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: jean-christophe.malapert@cnes.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DataCiteMetadataStoreMDSAPIApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cancel_doi_project(self, prefix, project, doi_name, **kwargs):  # noqa: E501
        """cancel_doi_project  # noqa: E501

        This request marks a dataset as 'inactive'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_doi_project(prefix, project, doi_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str prefix: DOI prefix (required)
        :param str project: Project identifier (required)
        :param str doi_name: Record ID (required)
        :param str selected_role: the selected role when a user is connected to more than 2 roles.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cancel_doi_project_with_http_info(prefix, project, doi_name, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_doi_project_with_http_info(prefix, project, doi_name, **kwargs)  # noqa: E501
            return data

    def cancel_doi_project_with_http_info(self, prefix, project, doi_name, **kwargs):  # noqa: E501
        """cancel_doi_project  # noqa: E501

        This request marks a dataset as 'inactive'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_doi_project_with_http_info(prefix, project, doi_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str prefix: DOI prefix (required)
        :param str project: Project identifier (required)
        :param str doi_name: Record ID (required)
        :param str selected_role: the selected role when a user is connected to more than 2 roles.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prefix', 'project', 'doi_name', 'selected_role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_doi_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'prefix' is set
        if ('prefix' not in params or
                params['prefix'] is None):
            raise ValueError("Missing the required parameter `prefix` when calling `cancel_doi_project`")  # noqa: E501
        # verify the required parameter 'project' is set
        if ('project' not in params or
                params['project'] is None):
            raise ValueError("Missing the required parameter `project` when calling `cancel_doi_project`")  # noqa: E501
        # verify the required parameter 'doi_name' is set
        if ('doi_name' not in params or
                params['doi_name'] is None):
            raise ValueError("Missing the required parameter `doi_name` when calling `cancel_doi_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'prefix' in params:
            path_params['prefix'] = params['prefix']  # noqa: E501
        if 'project' in params:
            path_params['project'] = params['project']  # noqa: E501
        if 'doi_name' in params:
            path_params['doi_name'] = params['doi_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'selected_role' in params:
            header_params['selectedRole'] = params['selected_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/mds/metadata/{prefix}/{project}/{doi_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_doi_metadata(self, prefix, project, doi_name, **kwargs):  # noqa: E501
        """get_all_doi_metadata  # noqa: E501

        Get all metdata oi  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_doi_metadata(prefix, project, doi_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str prefix: DOI prefix (required)
        :param str project: Project identifier (required)
        :param str doi_name: Record ID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_doi_metadata_with_http_info(prefix, project, doi_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_doi_metadata_with_http_info(prefix, project, doi_name, **kwargs)  # noqa: E501
            return data

    def get_all_doi_metadata_with_http_info(self, prefix, project, doi_name, **kwargs):  # noqa: E501
        """get_all_doi_metadata  # noqa: E501

        Get all metdata oi  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_doi_metadata_with_http_info(prefix, project, doi_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str prefix: DOI prefix (required)
        :param str project: Project identifier (required)
        :param str doi_name: Record ID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prefix', 'project', 'doi_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_doi_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'prefix' is set
        if ('prefix' not in params or
                params['prefix'] is None):
            raise ValueError("Missing the required parameter `prefix` when calling `get_all_doi_metadata`")  # noqa: E501
        # verify the required parameter 'project' is set
        if ('project' not in params or
                params['project'] is None):
            raise ValueError("Missing the required parameter `project` when calling `get_all_doi_metadata`")  # noqa: E501
        # verify the required parameter 'doi_name' is set
        if ('doi_name' not in params or
                params['doi_name'] is None):
            raise ValueError("Missing the required parameter `doi_name` when calling `get_all_doi_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'prefix' in params:
            path_params['prefix'] = params['prefix']  # noqa: E501
        if 'project' in params:
            path_params['project'] = params['project']  # noqa: E501
        if 'doi_name' in params:
            path_params['doi_name'] = params['doi_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mds/metadata/{prefix}/{project}/{doi_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_doi_media(self, prefix, project, doi_name, **kwargs):  # noqa: E501
        """get_doi_media  # noqa: E501

        Retuen a list of pairs of media type and URLs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_doi_media(prefix, project, doi_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str prefix: DOI prefix (required)
        :param str project: Project identifier (required)
        :param str doi_name: Record ID (required)
        :param str selected_role: the selected role when a user is connected to more than 2 roles.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_doi_media_with_http_info(prefix, project, doi_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_doi_media_with_http_info(prefix, project, doi_name, **kwargs)  # noqa: E501
            return data

    def get_doi_media_with_http_info(self, prefix, project, doi_name, **kwargs):  # noqa: E501
        """get_doi_media  # noqa: E501

        Retuen a list of pairs of media type and URLs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_doi_media_with_http_info(prefix, project, doi_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str prefix: DOI prefix (required)
        :param str project: Project identifier (required)
        :param str doi_name: Record ID (required)
        :param str selected_role: the selected role when a user is connected to more than 2 roles.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prefix', 'project', 'doi_name', 'selected_role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_doi_media" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'prefix' is set
        if ('prefix' not in params or
                params['prefix'] is None):
            raise ValueError("Missing the required parameter `prefix` when calling `get_doi_media`")  # noqa: E501
        # verify the required parameter 'project' is set
        if ('project' not in params or
                params['project'] is None):
            raise ValueError("Missing the required parameter `project` when calling `get_doi_media`")  # noqa: E501
        # verify the required parameter 'doi_name' is set
        if ('doi_name' not in params or
                params['doi_name'] is None):
            raise ValueError("Missing the required parameter `doi_name` when calling `get_doi_media`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'prefix' in params:
            path_params['prefix'] = params['prefix']  # noqa: E501
        if 'project' in params:
            path_params['project'] = params['project']  # noqa: E501
        if 'doi_name' in params:
            path_params['doi_name'] = params['doi_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'selected_role' in params:
            header_params['selectedRole'] = params['selected_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/uri-list'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mds/media/{prefix}/{project}/{doi_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_landing_page_url(self, prefix, project, doi_name, **kwargs):  # noqa: E501
        """get_landing_page_url  # noqa: E501

        Retrieves the landing page URL  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_landing_page_url(prefix, project, doi_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str prefix: DOI prefix (required)
        :param str project: Project identifier (required)
        :param str doi_name: Record ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_landing_page_url_with_http_info(prefix, project, doi_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_landing_page_url_with_http_info(prefix, project, doi_name, **kwargs)  # noqa: E501
            return data

    def get_landing_page_url_with_http_info(self, prefix, project, doi_name, **kwargs):  # noqa: E501
        """get_landing_page_url  # noqa: E501

        Retrieves the landing page URL  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_landing_page_url_with_http_info(prefix, project, doi_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str prefix: DOI prefix (required)
        :param str project: Project identifier (required)
        :param str doi_name: Record ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prefix', 'project', 'doi_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_landing_page_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'prefix' is set
        if ('prefix' not in params or
                params['prefix'] is None):
            raise ValueError("Missing the required parameter `prefix` when calling `get_landing_page_url`")  # noqa: E501
        # verify the required parameter 'project' is set
        if ('project' not in params or
                params['project'] is None):
            raise ValueError("Missing the required parameter `project` when calling `get_landing_page_url`")  # noqa: E501
        # verify the required parameter 'doi_name' is set
        if ('doi_name' not in params or
                params['doi_name'] is None):
            raise ValueError("Missing the required parameter `doi_name` when calling `get_landing_page_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'prefix' in params:
            path_params['prefix'] = params['prefix']  # noqa: E501
        if 'project' in params:
            path_params['project'] = params['project']  # noqa: E501
        if 'doi_name' in params:
            path_params['doi_name'] = params['doi_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mds/dois/{prefix}/{project}/{doi_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_doi_metadata(self, body, **kwargs):  # noqa: E501
        """post_doi_metadata  # noqa: E501

        Create or update doi project metadata (short explanation of status code e.g. CREATED, HANDLE_ALREADY_EXISTS)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_doi_metadata(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: metadata (required)
        :param str selected_role: the selected role when a user is connected to more than 2 roles.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_doi_metadata_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_doi_metadata_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_doi_metadata_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_doi_metadata  # noqa: E501

        Create or update doi project metadata (short explanation of status code e.g. CREATED, HANDLE_ALREADY_EXISTS)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_doi_metadata_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: metadata (required)
        :param str selected_role: the selected role when a user is connected to more than 2 roles.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'selected_role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_doi_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_doi_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'selected_role' in params:
            header_params['selectedRole'] = params['selected_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/mds/metadata', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_landing_page(self, url, doi, **kwargs):  # noqa: E501
        """post_landing_page  # noqa: E501

        Create a **new** doi project or update the landing page url if it the project already exists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_landing_page(url, doi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str url: the URL of the landing page (required)
        :param str doi: the project suffix, which is an unique identifier within the project (required)
        :param str selected_role: the selected role when a user is connected to more than 2 roles.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_landing_page_with_http_info(url, doi, **kwargs)  # noqa: E501
        else:
            (data) = self.post_landing_page_with_http_info(url, doi, **kwargs)  # noqa: E501
            return data

    def post_landing_page_with_http_info(self, url, doi, **kwargs):  # noqa: E501
        """post_landing_page  # noqa: E501

        Create a **new** doi project or update the landing page url if it the project already exists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_landing_page_with_http_info(url, doi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str url: the URL of the landing page (required)
        :param str doi: the project suffix, which is an unique identifier within the project (required)
        :param str selected_role: the selected role when a user is connected to more than 2 roles.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['url', 'doi', 'selected_role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_landing_page" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'url' is set
        if ('url' not in params or
                params['url'] is None):
            raise ValueError("Missing the required parameter `url` when calling `post_landing_page`")  # noqa: E501
        # verify the required parameter 'doi' is set
        if ('doi' not in params or
                params['doi'] is None):
            raise ValueError("Missing the required parameter `doi` when calling `post_landing_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'selected_role' in params:
            header_params['selectedRole'] = params['selected_role']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'url' in params:
            form_params.append(('url', params['url']))  # noqa: E501
        if 'doi' in params:
            form_params.append(('doi', params['doi']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/mds/dois', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_media(self, prefix, project, doi_name, **kwargs):  # noqa: E501
        """post_media  # noqa: E501

        add an association media/url  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_media(prefix, project, doi_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str prefix: DOI prefix (required)
        :param str project: Project identifier (required)
        :param str doi_name: Record ID (required)
        :param str selected_role: the selected role when a user is connected to more than 2 roles.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_media_with_http_info(prefix, project, doi_name, **kwargs)  # noqa: E501
        else:
            (data) = self.post_media_with_http_info(prefix, project, doi_name, **kwargs)  # noqa: E501
            return data

    def post_media_with_http_info(self, prefix, project, doi_name, **kwargs):  # noqa: E501
        """post_media  # noqa: E501

        add an association media/url  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_media_with_http_info(prefix, project, doi_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str prefix: DOI prefix (required)
        :param str project: Project identifier (required)
        :param str doi_name: Record ID (required)
        :param str selected_role: the selected role when a user is connected to more than 2 roles.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prefix', 'project', 'doi_name', 'selected_role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_media" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'prefix' is set
        if ('prefix' not in params or
                params['prefix'] is None):
            raise ValueError("Missing the required parameter `prefix` when calling `post_media`")  # noqa: E501
        # verify the required parameter 'project' is set
        if ('project' not in params or
                params['project'] is None):
            raise ValueError("Missing the required parameter `project` when calling `post_media`")  # noqa: E501
        # verify the required parameter 'doi_name' is set
        if ('doi_name' not in params or
                params['doi_name'] is None):
            raise ValueError("Missing the required parameter `doi_name` when calling `post_media`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'prefix' in params:
            path_params['prefix'] = params['prefix']  # noqa: E501
        if 'project' in params:
            path_params['project'] = params['project']  # noqa: E501
        if 'doi_name' in params:
            path_params['doi_name'] = params['doi_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'selected_role' in params:
            header_params['selectedRole'] = params['selected_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/mds/media/{prefix}/{project}/{doi_name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
